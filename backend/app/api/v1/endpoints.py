from fastapi import APIRouter, HTTPException
from backend.app.models.query import QueryRequest
from backend.app.models.result import QueryResponse, ChartData, TableData
from backend.app.services.query_parser import classify_query
from backend.app.services.analyzer import analyze_payment_method, analyze_region

router = APIRouter()

# –°–ª–æ–≤–∞—Ä—å, —Å–≤—è–∑—ã–≤–∞—é—â–∏–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º
analyzers = {
    "payment_method": analyze_payment_method,
    "region": analyze_region,
    # –î–æ–±–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # "experience": analyze_experience,
    # "skill": analyze_skill,
    # "gender": analyze_gender,
}

@router.post("/analyze", response_model=QueryResponse)
def analyze_query(query: QueryRequest):
    query_type = classify_query(query.question)
    print(f">>> üìå Detected query type: {query_type}")

    if query_type in analyzers:
        result = analyzers[query_type]()
    else:
        detail = ("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: "
                  "–ø–ª–∞—Ç–µ–∂–∏, —Ä–µ–≥–∏–æ–Ω—ã, –æ–ø—ã—Ç, —Å–∫–∏–ª–ª—ã, –≥–µ–Ω–¥–µ—Ä.")
        raise HTTPException(status_code=400, detail=detail)

    return QueryResponse(
        text=result["text"],
        chart=ChartData(**result["chart"]),
        table=TableData(**result["table"])
    )
